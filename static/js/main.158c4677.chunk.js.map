{"version":3,"sources":["styles/base.module.scss","components/ContactsList/ContactsList.module.scss","components/ContactFilter/ContactFilter.module.scss","redux/actions/contacts-actions.js","redux/reducers/contacrBookReducer.js","redux/store.js","components/ContactInput/ContactInput.js","redux/PhoneBook-selectors.js","components/ContactItem/ContactItem.js","components/ContactsList/ContactsList.js","components/ContactFilter/ContactFilter.js","App.js","index.js","components/ContactItem/ContactItem.module.scss"],"names":["module","exports","addContact","createAction","name","number","payload","id","ShortId","generate","deleteContact","filterChange","contacts","createReducer","state","action","filter","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contactBook","persistReducer","contactBookReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","persistor","persistStore","ContactInput","useState","setName","setNumber","nameInputId","numberInputId","inputContact","stateContacts","useSelector","dispatch","useDispatch","handelChange","e","target","value","compareContacts","newContact","find","contact","toLowerCase","alert","onSubmit","preventDefault","type","pattern","title","required","onChange","getFilter","contactFilter","normalizedFilter","filteredContacts","getContacts","includes","ContactItem","onDeleteContact","className","s","contactItem","contact_name","contact_number","onClick","contact_btn","ContactsList","console","log","contact_list","map","Filter","filterValue","filter_label","App","main_container","ReactDOM","render","StrictMode","loading","document","querySelector"],"mappings":"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","file":"static/js/main.158c4677.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"base_root__2ylE5\",\"main_container\":\"base_main_container__3hhqe\",\"title\":\"base_title__groH1\",\"contact_btn\":\"base_contact_btn__2x7ZR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ContactsList_root__3Dtbz\",\"main_container\":\"ContactsList_main_container__3nKCU\",\"title\":\"ContactsList_title__3C1k7\",\"contact_btn\":\"ContactsList_contact_btn__jxRTC\",\"contact_list\":\"ContactsList_contact_list__31z_0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ContactFilter_root__BB3k8\",\"main_container\":\"ContactFilter_main_container__2O6xJ\",\"title\":\"ContactFilter_title__2iqZK\",\"contact_btn\":\"ContactFilter_contact_btn__2aBgg\",\"filter_label\":\"ContactFilter_filter_label__2cL5L\"};","import { createAction } from '@reduxjs/toolkit';\n\nimport ShortId from 'shortid';\n\nconst addContact = createAction('contacts/add', ({ name, number }) => {\n  return {\n    payload: {\n      id: ShortId.generate(),\n      name: name,\n      number: number,\n    },\n  };\n});\nconst deleteContact = createAction('contacts/delete');\nconst filterChange = createAction('contacts/changeFilter');\n\nexport { addContact, deleteContact, filterChange };\n\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addContact, deleteContact, filterChange } from '../actions/contacts-actions';\n\nconst contacts = createReducer([], {\n  [addContact]: (state, action) => [...state, action.payload],\n  [deleteContact]: (state, action) => state.filter(({ id }) => id !== action.payload),\n});\n\nconst filter = createReducer('', {\n  [filterChange]: (_, action) => action.payload,\n});\n\nexport default combineReducers({\n  contacts,\n  filter,\n});\n\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactBookReducer from './reducers/contacrBookReducer';\nimport logger from 'redux-logger';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: {\n    contactBook: persistReducer(contactsPersistConfig, contactBookReducer),\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(logger),\n\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n\n\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ShortId from 'shortid';\nimport { addContact } from '../../redux/actions/contacts-actions';\n\nfunction ContactInput() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = ShortId.generate();\n  const numberInputId = ShortId.generate();\n\n  const inputContact = { name, number };\n\n  const stateContacts = useSelector(state => state.contactBook.contacts);\n\n  const dispatch = useDispatch();\n\n  const onSubmit = () => dispatch(addContact(inputContact));\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handelChange = e => {\n    const inputName = e.target.name;\n    switch (inputName) {\n      case 'name':\n        setName(e.target.value);\n        break;\n\n      case 'number':\n        setNumber(e.target.value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const compareContacts = newContact => {\n    if (\n      stateContacts.find(contact => contact.name.toLowerCase() === newContact.name.toLowerCase())\n    ) {\n      alert(`${newContact.name} is already in contacts!`);\n      return;\n    }\n    onSubmit(newContact);\n  };\n\n  const handelSubmit = e => {\n    e.preventDefault();\n\n    compareContacts(inputContact);\n\n    reset();\n  };\n\n  return (\n    <form onSubmit={handelSubmit}>\n      <label id={nameInputId}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          id={nameInputId}\n          onChange={handelChange}\n        />\n      </label>\n      <label id={numberInputId}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          id={numberInputId}\n          onChange={handelChange}\n        />\n      </label>\n      <button type=\"submit\">add contact</button>\n    </form>\n  );\n}\n\nContactInput.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactInput;\n","const getContacts = state => state.contactBook.contacts;\nconst getFilter = state => state.contactBook.filter;\n\nconst contactFilter = state => {\n  const normalizedFilter = getFilter(state).toLowerCase();\n  const filteredContacts = getContacts(state).filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n  return filteredContacts;\n};\n\nexport { getContacts, getFilter, contactFilter };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactItem.module.scss';\n\nconst ContactItem = ({ id, name, number, onDeleteContact }) => (\n  <li className={s.contactItem}>\n    <div>\n      <span className={s.contact_name}>{name}</span>\n      <span className={s.contact_number}>{number}</span>\n    </div>\n    <button onClick={() => onDeleteContact(id)} className={s.contact_btn}>\n      X\n    </button>\n  </li>\n);\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/actions/contacts-actions';\nimport { contactFilter } from '../../redux/PhoneBook-selectors';\nimport ContactItem from '../ContactItem';\nimport s from './ContactsList.module.scss';\n\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => dispatch(deleteContact(id));\n\n  const contacts = useSelector(contactFilter);\n\n  console.log(contacts);\n\n  return (\n    <ul className={s.contact_list}>\n      {contacts.map(contact => (\n        <ContactItem\n          key={contact.id}\n          id={contact.id}\n          name={contact.name}\n          number={contact.number}\n          onDeleteContact={() => onDeleteContact(contact.id)}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterChange } from '../../redux/actions/contacts-actions';\nimport { getFilter } from '../../redux/PhoneBook-selectors';\nimport s from './ContactFilter.module.scss';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const onChange = e => dispatch(filterChange(e.target.value));\n  const filterValue = useSelector(getFilter);\n\n  return (\n    <label>\n      <span className={s.filter_label}>Contact filter</span>\n      <input type=\"text\" name=\"filter\" value={filterValue} onChange={onChange} />\n    </label>\n  );\n};\n\nexport default Filter;\n","import ContactInput from './components/ContactInput';\nimport ContactsList from './components/ContactsList/ContactsList';\n\nimport Filter from './components/ContactFilter';\n\nimport s from './styles/base.module.scss';\n\nfunction App() {\n  return (\n    <div className={s.main_container}>\n      <h1 className={s.title}>Phonebook</h1>\n\n      <ContactInput />\n      <h2 className={s.title}>Contacts</h2>\n\n      <Filter />\n      {/* {contacts.length > 1 && <Filter onChange={changeFilter} value={filter} />} */}\n\n      <ContactsList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ContactItem_root__ocbp7\",\"main_container\":\"ContactItem_main_container__1szn-\",\"title\":\"ContactItem_title__2B7PC\",\"contact_btn\":\"ContactItem_contact_btn__18NQH\",\"contact\":\"ContactItem_contact__3_3AI\",\"contact_number\":\"ContactItem_contact_number___xT0O\",\"contactItem\":\"ContactItem_contactItem__2urKt\"};"],"sourceRoot":""}